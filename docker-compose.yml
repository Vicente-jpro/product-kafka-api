services:
  zookeeper-watchguard:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper-watchguard
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - watchguard-zookeeper-data:/var/lib/zookeeper
    networks:
      - watchguard-network

  kafka-watchguard:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka-watchguard
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-watchguard:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    depends_on:
      - zookeeper-watchguard
    volumes:
      - watchguard-kafka-data:/var/lib/kafka/data
    networks:
      - watchguard-network

volumes:
  watchguard-zookeeper-data:
    driver: local
  watchguard-kafka-data:
    driver: local

networks:
  watchguard-network:
    driver: bridge

# services:
#   kafka1:
#     image: bitnami/kafka:latest
#     ports:
#       - "9092:9092"
#     environment:
#       - KAFKA_CFG_NODE_ID=1
#       - KAFKA_KRAFT_CLUSTER_ID=c4ca4238a0b923820dcc509a6f75849b
#       - KAFKA_CFG_PROCESS_ROLES=controller,broker
#       - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9091
#       - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
#       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
#       #- KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:SSL,PLAINTEXT:PLAINTEXT # for production enviroment
#       - KAFKA_CFG_ADVERTISED_LISTENER=PLAINTEXT://kafka1:9090,EXTERNAL://:${HOSTNAME:-localhost}:9092
#       - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#       - KAFKA_CFG_INTER_BROKER_LISTENER_NAMES=PLAINTEXT
#     volumes:
#       - "/Documents/Kafka/volumes/bitnami/kafka"

# Generate rundom ID.
# ./bin/kafka-storage.sh random-uuid 

# Create kafka topic with 3 partitions
# ./kafka-topics.sh --create --topic topic-name --partitions 3 --replication-factor 3 --bootstrap-server localhost:9092
# ./kafka-topics.sh --create --topic topic-name --partitions 3 --replication-factor 3 --bootstrap-server host.docker.internal:9092
# ./kafka-topics.sh --describe --bootstrap-server host.docker.internal:9092
# ./kafka-topics.sh --delete --topic topic-name --bootstrap-server host.docker.internal:9092

# The main use of kafka-console-producer.sh script is to send a message to a particular Kafka topic.